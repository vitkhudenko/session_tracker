apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

// https://issuetracker.google.com/issues/72050365
afterEvaluate {
    generateReleaseBuildConfig.enabled = false
}

def libraryVersionName = '0.3.1'
def artifactName = 'SessionTracker'

android {

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName libraryVersionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    libraryVariants.all { variant ->
        if (variant.name == 'release') {
            tasks.create(
                    name: "jacocoUnitTestReport",
                    type: JacocoReport,
                    dependsOn: ["test${variant.name.capitalize()}UnitTest"]
            ) {
                def fileFilter = [
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.class'
                ]

                def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: fileFilter)
                def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variant.name}", excludes: fileFilter)
                def sourceDirs = variant.sourceSets.java.srcDirs.collect { it.path }.flatten()
                def jacocoReport = project.tasks["test${variant.name.capitalize()}UnitTest"].jacoco.destinationFile.path

                executionData.from = project.fileTree(dir: jacocoReport)
                sourceDirectories.from = project.files(sourceDirs)
                classDirectories.from = project.files([javaClasses, kotlinClasses])
                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'vit.khudenko.android:fsm:0.2.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.28.2'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'
    testImplementation 'io.mockk:mockk:1.9.3'
}

def bintrayPropertiesFile = rootProject.file('bintray.properties')
if (bintrayPropertiesFile.exists()) {
    def inputStream = bintrayPropertiesFile.newInputStream()
    try {
        def properties = new Properties()
        properties.load(inputStream)
        properties.each {
            ext.set(it.key, it.value)
        }
    } finally {
        inputStream.close()
    }
}

publishing {
    publications {
        release(MavenPublication) {

            artifacts {
                artifact("$buildDir/outputs/aar/session_tracker_lib-release.aar")
                groupId 'vit.khudenko.android'
                artifactId 'sessiontracker'
                version libraryVersionName
                artifact sourcesJar {
                    classifier 'sources'
                }
            }

            pom.withXml {

                asNode().appendNode('name', artifactName)

                // Define this explicitly if using implementation or api configurations
                def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones),
                // adding a <dependency> node for each

                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

            }
        }
    }
}

bintray {
    if (!project.hasProperty('bintray.user')) {
        return
    }
    user = project.property('bintray.user')
    key = project.property('bintray.apiKey')
    publications = ['release']
    dryRun = false
    publish = true
    override = false
    pkg {
        repo = 'libs'
        name = artifactName
        licenses = ['MIT']
        desc = 'A general purpose framework to provide a foundation for session management.'
        websiteUrl = 'https://github.com/vitkhudenko/session_tracker'
        vcsUrl = 'https://github.com/vitkhudenko/session_tracker.git'
        labels = ['session', 'kotlin', 'java', 'android']
        publicDownloadNumbers = false
        githubRepo = 'vitkhudenko/session_tracker'
        githubReleaseNotesFile = 'README.md'
        version {
            name = libraryVersionName
            released = new Date()
        }
    }
}