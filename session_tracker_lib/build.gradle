apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

def libraryVersionName = '0.4.3'
def artifactName = 'SessionTracker'

android {

    buildFeatures {
        buildConfig = false
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 30
        versionCode 1
        versionName libraryVersionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    libraryVariants.all { variant ->
        if (variant.name == 'release') {
            tasks.create(
                    name: "jacocoUnitTestReport",
                    type: JacocoReport,
                    dependsOn: ["test${variant.name.capitalize()}UnitTest"]
            ) {
                def fileFilter = [
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.class'
                ]

                def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: fileFilter)
                def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variant.name}", excludes: fileFilter)
                def sourceDirs = variant.sourceSets.java.srcDirs.collect { it.path }.flatten()
                def jacocoReport = project.tasks["test${variant.name.capitalize()}UnitTest"].jacoco.destinationFile.path

                executionData.from = project.fileTree(dir: jacocoReport)
                sourceDirectories.from = project.files(sourceDirs)
                classDirectories.from = project.files([javaClasses, kotlinClasses])
                reports {
                    xml.enabled = false
                    html.enabled = true
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.github.vitkhudenko:state_machine:0.3.3'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.9.0'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'io.mockk:mockk:1.10.6'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {

                from components.release

                groupId 'com.github.vitkhudenko'
                artifactId 'session_tracker'
                version libraryVersionName

                artifacts {
                    artifact sourcesJar {
                        classifier 'sources'
                    }
                }

                pom {
                    name = artifactName
                    description = 'A general purpose framework to provide a foundation for session management.'
                    url = 'https://github.com/vitkhudenko/session_tracker'
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://github.com/vitkhudenko/session_tracker/blob/master/LICENSE'
                        }
                    }
                }

            }
        }
    }
}
